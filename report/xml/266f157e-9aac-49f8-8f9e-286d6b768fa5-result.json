{"name": "test_home", "status": "broken", "statusDetails": {"message": "base.verify.NotFoundElementError", "trace": "self = <base.action.ElementActions object at 0x000001FCE6EB4A60>\nlocator = {'dynamic': False, 'name': '搜索输入框', 'page': '分类列表搜索页', 'switch': None, ...}\nis_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True, wait=5, is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count = Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"), locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n>               WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase\\action.py:537: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"82a6056a-3be0-4235-a734-051e8e6263d8\")>\nmethod = <function ElementActions._find_element.<locals>.<lambda> at 0x000001FCE6E95D80>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       NoSuchElementError: An element could not be located on the page using the given search parameters.\nE           at AndroidUiautomator2Driver.findElOrEls (D:\\Program Files\\nodejs\\node_global\\node_modules\\appium\\node_modules\\appium-android-driver\\lib\\commands\\find.js:75:11)\nE           at runMicrotasks (<anonymous>)\nE           at processTicksAndRejections (node:internal/process/task_queues:96:5)\nE           at AndroidUiautomator2Driver.findElOrElsWithProcessing (D:\\Program Files\\nodejs\\node_global\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\commands\\find.js:33:12)\nE           at AndroidUiautomator2Driver.findElement (D:\\Program Files\\nodejs\\node_global\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\basedriver\\commands\\find.js:53:10)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:90: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_suit2.test_demo2.Test_demo object at 0x000001FCE6EB4580>\naction = <base.action.ElementActions object at 0x000001FCE6EB4A60>\n\n    def test_home(self, action: ElementActions):\n    \n        # up.登录页.login(action,'13550234762','tmhrush2233')\n    \n    \n        action.click(p.特卖首页.搜索输入框)\n    \n        #因为调用action的大部分公用方法是返回self，所以可以一条语句执行多次不同方法\n>       action.text(p.分类列表搜索页.搜索输入框,\"口红\")\\\n            .click(p.分类列表搜索页.搜索按钮)\n\ntests\\test_suit2\\test_demo2.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\action.py:372: in text\n    element = self._find_element(locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <base.action.ElementActions object at 0x000001FCE6EB4A60>\nlocator = {'dynamic': False, 'name': '搜索输入框', 'page': '分类列表搜索页', 'switch': None, ...}\nis_need_displayed = True, wait = 5, is_raise = True\n\n    def _find_element(self, locator, is_need_displayed=True, wait=5, is_raise=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n            is_raise: 是否抛出异常\n    \n        Returns: 元素 ,没找到返回 None\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n    \n        waittime_count = Waittime_count(msg='[查找] 页面【{}】该元素【{}】等待时间:'.format(locator.get(\"page\"), locator.get(\"name\")))\n        waittime_count.start()\n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n            else:\n                WebDriverWait(self.driver, wait).until(\n                    lambda driver: self._get_element_by_type(driver, locator) is not None)\n    \n            waittime_count.end()\n            return self._get_element_by_type(self.driver, locator)\n        except Exception as e:\n    \n            if is_raise == True:\n                log.error(\n                    \"【{}】页面中未能找到元素【{}】\\n locator: \\n {}\".format(locator.get(\"page\"), locator.get(\"name\"), locator))\n>               raise NotFoundElementError\nE               base.verify.NotFoundElementError\n\nbase\\action.py:550: NotFoundElementError"}, "attachments": [{"name": "log", "source": "29de5ca2-06c8-4d72-8e31-e7f0eb180058-attachment.txt", "type": "text/plain"}], "start": 1658316241940, "stop": 1658316249269, "uuid": "af904bfa-85ac-45ce-a69f-4179f5b5783c", "historyId": "664876ab20be2b5ad5a0349406424ad4", "testCaseId": "4a4a52bbe4a9b65ef68e26d253501f62", "fullName": "tests.test_suit2.test_demo2.Test_demo#test_home", "labels": [{"name": "parentSuite", "value": "tests.test_suit2"}, {"name": "suite", "value": "test_demo2"}, {"name": "subSuite", "value": "Test_demo"}, {"name": "host", "value": "DESKTOP-QR6KK6V"}, {"name": "thread", "value": "16292-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_suit2.test_demo2"}]}